SELECT c.CourseName, cr.Grade FROM grade5 AS cr INNER JOIN CourseOffers AS co ON cr.courseOfferId = co.courseOfferId INNER JOIN Courses AS c ON c.CourseId = co.CourseId INNER JOIN StudentRegistrationsToDegrees AS srtd ON srtd.StudentRegistrationId = cr.StudentRegistrationId WHERE srtd.StudentId = %1% AND srtd.DegreeId = %2% ORDER BY co.Year, co.Quartile, co.CourseOfferId;
SELECT 0;
SELECT ad.DegreeId AS degreeid, (cast(count(case when Students.Gender='F' then 1 end) AS FLOAT))/cast(count(Students.Gender) AS FLOAT) AS percentage FROM ActiveDegrees AS ad INNER JOIN Students ON ad.StudentId = Students.StudentId GROUP BY ad.DegreeId ORDER BY ad.DegreeId ASC;
SELECT (1.0 * count(case when Students.Gender='F' then 1 end))/count(Students.Gender) AS percentage FROM StudentRegistrationsToDegrees as srd INNER JOIN Students ON srd.StudentId = Students.StudentId INNER JOIN Degrees ON srd.DegreeId = Degrees.DegreeId WHERE Degrees.Dept = %1% GROUP BY Degrees.Dept;
SELECT CourseId, 1.0 * StudentsPassed/StudentAmount AS percentagePassing FROM (SELECT CourseId, COUNT(StudentRegistrationId) AS StudentsPassed FROM (SELECT CourseId, StudentRegistrationId, Grade FROM (SELECT CourseOfferId, CourseId FROM CourseOffers) as co NATURAL JOIN CourseRegistrations WHERE Grade IS NOT NULL) as corGrades WHERE Grade >= %1% GROUP BY CourseId) as passed NATURAL JOIN (SELECT CourseId, COUNT(StudentRegistrationId) AS StudentAmount FROM (SELECT CourseId, StudentRegistrationId, Grade FROM (SELECT CourseOfferId, CourseId FROM CourseOffers) as coo NATURAL JOIN CourseRegistrations WHERE Grade IS NOT NULL) as corrGrades GROUP BY CourseId) as amount GROUP BY CourseId, StudentsPassed, StudentAmount ORDER BY CourseId;
WITH temp2 (StudId, CourseOffId, Grd) AS (SELECT srtd.StudentId, cr.courseOfferId, cr.Grade FROM CourseRegistrations AS cr INNER JOIN StudentRegistrationsToDegrees AS srtd ON srtd.StudentRegistrationId = cr.StudentRegistrationId INNER JOIN CourseOffers AS co ON cr.courseOfferId = co.courseOfferId INNER JOIN (SELECT cr1.courseOfferId, MAX(cr1.Grade) AS maxGrade FROM CourseRegistrations AS cr1 GROUP BY cr1.courseOfferId) inTable ON cr.courseOfferId = inTable.courseOfferId AND cr.Grade = inTable.maxGrade WHERE co.Year = 2018 AND co.quartile = 1) SELECT temp2.StudId, COUNT(temp2.StudId) FROM temp2 GROUP BY temp2.StudId HAVING COUNT(temp2.StudId) >= %1% ORDER BY temp2.StudId;
SELECT 0;
WITH studentsForCourse (CourseOfferId, StudentCount) AS (SELECT CourseOfferId, COUNT(StudentRegistrationId) AS StudentCount FROM CourseRegistrations GROUP BY CourseOfferId), assistantsForCourse (CourseOfferId, CourseId, Year, Quartile, AssistantCount) AS (SELECT co.CourseOfferId, CourseId, Year, Quartile, CASE WHEN StudentCount IS NULL THEN 0 ELSE StudentCount END FROM CourseOffers AS co LEFT JOIN (SELECT CourseOfferId, COUNT(StudentRegistrationId) AS StudentCount FROM StudentAssistants GROUP BY CourseOfferId) AS StudentAsstCount on StudentAsstCount.CourseOfferId = co.CourseOfferId) SELECT CourseName, Year, Quartile FROM (studentsForCourse NATURAL JOIN assistantsForCourse NATURAL JOIN Courses) WHERE StudentCount > AssistantCount * 50 GROUP BY CourseOfferId, CourseName, Year, Quartile ORDER BY CourseOfferId;
